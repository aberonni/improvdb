// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Category {
  id   String @id
  name String

  resources CategoriesOnResources[]
}

enum ResourceType {
  EXERCISE
  SHORT_FORM
  LONG_FORM
}

enum ResourceConfiguation {
  SOLO
  PAIRS
  GROUPS
  WHOLE_CLASS
  CIRCLE
  SCENE
}

model Resource {
  id            String                  @id
  title         String
  description   String                  @db.Text
  type          ResourceType
  categories    CategoriesOnResources[]
  configuration ResourceConfiguation
  groupSize     Int

  showIntroduction String? @db.Text
  video            String?
  alternativeNames String?

  relatedResources      Resource[] @relation("RelatedResources") // child Resource (Resource that are suggested)
  relatedResourceParent Resource[] @relation("RelatedResources") // parent Resource (parent Resource of a suggested Resource)

  published Boolean  @default(false)
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdById])
}

model CategoriesOnResources {
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String // relation scalar field (used in the `@relation` attribute above)
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([resourceId, categoryId])
  @@index([categoryId])
  @@index([resourceId])
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    resources     Resource[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
